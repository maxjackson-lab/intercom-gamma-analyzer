"""
Integration tests for Gamma API with real API calls.
These tests require a valid GAMMA_API_KEY environment variable.
"""

import pytest
import os
import asyncio
from pathlib import Path
import json

from src.services.gamma_client import GammaClient, GammaAPIError
from src.services.gamma_generator import GammaGenerator
from src.services.presentation_builder import PresentationBuilder
from src.services.google_docs_exporter import GoogleDocsExporter


class TestGammaAPIIntegration:
    """Integration tests for Gamma API."""
    
    @pytest.fixture
    def gamma_client(self):
        """Create a GammaClient instance for testing."""
        return GammaClient()
    
    @pytest.fixture
    def sample_analysis_results(self):
        """Create sample analysis results for testing."""
        return {
            'conversations': [
                {
                    'id': 'conv_1',
                    'created_at': '2024-01-01T10:00:00Z',
                    'state': 'closed',
                    'conversation_parts': {
                        'conversation_parts': [
                            {
                                'author': {'type': 'user'},
                                'body': 'I need help with my billing issue. The charge seems incorrect and I would like a refund.'
                            }
                        ]
                    },
                    'contacts': {
                        'contacts': [
                            {'name': 'John Doe', 'email': 'john@example.com'}
                        ]
                    },
                    'tags': {
                        'tags': [
                            {'name': 'Billing'},
                            {'name': 'Refund'}
                        ]
                    }
                },
                {
                    'id': 'conv_2',
                    'created_at': '2024-01-02T11:00:00Z',
                    'state': 'open',
                    'conversation_parts': {
                        'conversation_parts': [
                            {
                                'author': {'type': 'user'},
                                'body': 'The API is not working properly. Getting 500 errors when trying to integrate.'
                            }
                        ]
                    },
                    'contacts': {
                        'contacts': [
                            {'name': 'Jane Smith', 'email': 'jane@example.com'}
                        ]
                    },
                    'tags': {
                        'tags': [
                            {'name': 'API'},
                            {'name': 'Technical'}
                        ]
                    }
                }
            ],
            'category_results': {
                'Billing': {
                    'conversation_count': 1,
                    'percentage': 50.0,
                    'escalation_rate': 20.0,
                    'avg_response_time': '2.5 hours',
                    'top_issues': ['refund', 'charge', 'invoice'],
                    'resolution_rate': 80.0
                },
                'API': {
                    'conversation_count': 1,
                    'percentage': 50.0,
                    'escalation_rate': 15.0,
                    'avg_response_time': '1.8 hours',
                    'top_issues': ['error', 'integration', 'timeout'],
                    'resolution_rate': 85.0
                }
            },
            'start_date': '2024-01-01',
            'end_date': '2024-01-31'
        }
    
    @pytest.mark.skipif(
        not os.getenv('GAMMA_API_KEY'),
        reason="GAMMA_API_KEY not set - skipping live API test"
    )
    @pytest.mark.asyncio
    async def test_real_gamma_api_connection(self, gamma_client):
        """Test connection to real Gamma API."""
        result = await gamma_client.test_connection()
        assert result is True
    
    @pytest.mark.skipif(
        not os.getenv('GAMMA_API_KEY'),
        reason="GAMMA_API_KEY not set - skipping live API test"
    )
    @pytest.mark.asyncio
    async def test_real_gamma_api_generation(self, gamma_client):
        """Integration test with real Gamma API."""
        # Simple test content
        test_content = """# Test Presentation

This is a test presentation generated by the Intercom Analysis Tool.

## Test Slide 1

This slide contains test content to verify the Gamma API integration.

## Test Slide 2

The API should successfully generate a presentation from this content.

---

*Generated by integration test*"""
        
        try:
            # Generate presentation
            generation_id = await gamma_client.generate_presentation(
                input_text=test_content,
                format="presentation",
                num_cards=3,
                text_mode="preserve"
            )
            
            assert generation_id is not None
            assert len(generation_id) > 0
            
            # Poll for completion
            result = await gamma_client.poll_generation(generation_id, max_polls=10)
            
            assert result['status'] == 'completed'
            assert 'gammaUrl' in result
            assert result['gammaUrl'].startswith('https://gamma.app/')
            
            print(f"✅ Real Gamma API test successful!")
            print(f"Generation ID: {generation_id}")
            print(f"Gamma URL: {result['gammaUrl']}")
            
        except GammaAPIError as e:
            pytest.fail(f"Gamma API error: {e}")
        except Exception as e:
            pytest.fail(f"Unexpected error: {e}")
    
    @pytest.mark.skipif(
        not os.getenv('GAMMA_API_KEY'),
        reason="GAMMA_API_KEY not set - skipping live API test"
    )
    @pytest.mark.asyncio
    async def test_real_gamma_api_with_export(self, gamma_client):
        """Test Gamma API with PDF export."""
        test_content = """# Test Presentation with Export

This presentation tests the export functionality.

## Export Test

This should generate a PDF export link.

---

*Export test*"""
        
        try:
            # Generate presentation with PDF export
            generation_id = await gamma_client.generate_presentation(
                input_text=test_content,
                format="presentation",
                num_cards=2,
                export_as="pdf"
            )
            
            assert generation_id is not None
            
            # Poll for completion
            result = await gamma_client.poll_generation(generation_id, max_polls=10)
            
            assert result['status'] == 'completed'
            assert 'gammaUrl' in result
            
            # Check if export URL is provided
            if 'exportUrl' in result:
                print(f"✅ Export test successful!")
                print(f"Export URL: {result['exportUrl']}")
            else:
                print(f"⚠️ Export URL not provided in response")
            
        except GammaAPIError as e:
            pytest.fail(f"Gamma API error: {e}")
        except Exception as e:
            pytest.fail(f"Unexpected error: {e}")
    
    @pytest.mark.skipif(
        not os.getenv('GAMMA_API_KEY'),
        reason="GAMMA_API_KEY not set - skipping live API test"
    )
    @pytest.mark.asyncio
    async def test_real_gamma_generator_integration(self, sample_analysis_results):
        """Test full GammaGenerator integration with real API."""
        try:
            gamma_generator = GammaGenerator()
            
            # Generate executive presentation
            result = await gamma_generator.generate_from_analysis(
                analysis_results=sample_analysis_results,
                style="executive"
            )
            
            assert result['gamma_url'] is not None
            assert result['generation_id'] is not None
            assert result['style'] == 'executive'
            assert result['generation_time_seconds'] > 0
            
            print(f"✅ GammaGenerator integration test successful!")
            print(f"Gamma URL: {result['gamma_url']}")
            print(f"Credits used: {result['credits_used']}")
            print(f"Generation time: {result['generation_time_seconds']:.1f} seconds")
            
        except Exception as e:
            pytest.fail(f"GammaGenerator integration error: {e}")
    
    @pytest.mark.skipif(
        not os.getenv('GAMMA_API_KEY'),
        reason="GAMMA_API_KEY not set - skipping live API test"
    )
    @pytest.mark.asyncio
    async def test_real_gamma_generator_all_styles(self, sample_analysis_results):
        """Test GammaGenerator with all presentation styles."""
        try:
            gamma_generator = GammaGenerator()
            
            # Generate all styles
            results = await gamma_generator.generate_all_styles(sample_analysis_results)
            
            assert len(results) == 3
            assert 'executive' in results
            assert 'detailed' in results
            assert 'training' in results
            
            successful_generations = 0
            for style, result in results.items():
                if result.get('gamma_url'):
                    successful_generations += 1
                    print(f"✅ {style.title()} presentation: {result['gamma_url']}")
                else:
                    print(f"❌ {style.title()} presentation failed: {result.get('error', 'Unknown error')}")
            
            assert successful_generations > 0, "At least one presentation should be generated successfully"
            
            # Show statistics
            stats = gamma_generator.get_generation_statistics(results)
            print(f"\n📊 Generation Statistics:")
            print(f"  Total generations: {stats['total_generations']}")
            print(f"  Successful: {stats['successful_generations']}")
            print(f"  Failed: {stats['failed_generations']}")
            print(f"  Total credits used: {stats['total_credits_used']}")
            print(f"  Total time: {stats['total_time_seconds']:.1f} seconds")
            
        except Exception as e:
            pytest.fail(f"All styles generation error: {e}")
    
    @pytest.mark.asyncio
    async def test_presentation_builder_integration(self, sample_analysis_results):
        """Test PresentationBuilder integration (no API calls)."""
        try:
            presentation_builder = PresentationBuilder()
            
            # Test all styles
            styles = ['executive', 'detailed', 'training']
            
            for style in styles:
                content = presentation_builder.build_narrative_content(
                    sample_analysis_results, 
                    style=style
                )
                
                assert isinstance(content, str)
                assert len(content) > 100  # Should have substantial content
                
                # Verify style-specific content
                if style == 'executive':
                    assert 'Executive Summary' in content
                elif style == 'detailed':
                    assert 'Comprehensive Customer Support Analysis' in content
                elif style == 'training':
                    assert 'Customer Support Training Materials' in content
                
                print(f"✅ {style.title()} content generated ({len(content)} characters)")
            
            # Test quote extraction
            quotes = presentation_builder.extract_customer_quotes(
                sample_analysis_results['conversations'], 
                max_quotes=2
            )
            
            assert len(quotes) == 2
            assert quotes[0]['customer_name'] == 'John Doe'
            assert quotes[1]['customer_name'] == 'Jane Smith'
            
            print(f"✅ Customer quotes extracted: {len(quotes)} quotes")
            
        except Exception as e:
            pytest.fail(f"PresentationBuilder integration error: {e}")
    
    @pytest.mark.asyncio
    async def test_google_docs_exporter_integration(self, sample_analysis_results):
        """Test GoogleDocsExporter integration (no API calls)."""
        try:
            docs_exporter = GoogleDocsExporter()
            
            # Test all styles
            styles = ['executive', 'detailed', 'training']
            
            for style in styles:
                # Create temporary file
                temp_file = Path(f"/tmp/test_export_{style}.md")
                
                result_path = docs_exporter.export_to_markdown(
                    analysis_results=sample_analysis_results,
                    output_path=temp_file,
                    style=style
                )
                
                assert result_path == temp_file
                assert temp_file.exists()
                
                # Verify content
                content = temp_file.read_text(encoding='utf-8')
                assert len(content) > 100
                assert '2024-01-01 to 2024-01-31' in content
                
                print(f"✅ {style.title()} markdown exported: {len(content)} characters")
                
                # Clean up
                temp_file.unlink()
            
        except Exception as e:
            pytest.fail(f"GoogleDocsExporter integration error: {e}")
    
    @pytest.mark.skipif(
        not os.getenv('GAMMA_API_KEY'),
        reason="GAMMA_API_KEY not set - skipping live API test"
    )
    @pytest.mark.asyncio
    async def test_end_to_end_comprehensive_analysis_with_gamma(self, sample_analysis_results):
        """Full end-to-end test: Analysis → Gamma generation."""
        try:
            from services.orchestrator import AnalysisOrchestrator
            
            # Create a mock comprehensive report
            comprehensive_report = {
                'conversations': sample_analysis_results['conversations'],
                'category_results': sample_analysis_results['category_results'],
                'synthesis_results': {
                    'key_insights': ['Billing issues are the top concern'],
                    'recommendations': ['Improve billing process']
                },
                'specialized_results': {
                    'fin_analysis': {'escalation_rate': 15.0},
                    'technical_analysis': {'api_issues': 5}
                }
            }
            
            # Test orchestrator's Gamma generation
            orchestrator = AnalysisOrchestrator()
            
            options = {
                'gamma_style': 'executive',
                'gamma_export': None,
                'export_docs': False,
                'output_directory': Path('/tmp')
            }
            
            gamma_result = await orchestrator._generate_gamma_presentation(
                comprehensive_report=comprehensive_report,
                start_date='2024-01-01',
                end_date='2024-01-31',
                options=options
            )
            
            assert gamma_result['gamma_url'] is not None
            assert gamma_result['generation_id'] is not None
            assert gamma_result['style'] == 'executive'
            
            print(f"✅ End-to-end test successful!")
            print(f"Gamma URL: {gamma_result['gamma_url']}")
            print(f"Credits used: {gamma_result['credits_used']}")
            
        except Exception as e:
            pytest.fail(f"End-to-end test error: {e}")
    
    @pytest.mark.skipif(
        not os.getenv('GAMMA_API_KEY'),
        reason="GAMMA_API_KEY not set - skipping live API test"
    )
    @pytest.mark.asyncio
    async def test_gamma_api_rate_limits(self, gamma_client):
        """Test Gamma API rate limit handling."""
        try:
            # Generate multiple presentations quickly to test rate limiting
            test_content = """# Rate Limit Test

This tests the rate limiting behavior of the Gamma API.

## Test Slide

Multiple rapid requests should be handled gracefully.

---

*Rate limit test*"""
            
            generation_ids = []
            
            # Make 3 rapid requests
            for i in range(3):
                try:
                    generation_id = await gamma_client.generate_presentation(
                        input_text=f"{test_content}\n\nRequest #{i+1}",
                        format="presentation",
                        num_cards=2
                    )
                    generation_ids.append(generation_id)
                    print(f"✅ Request {i+1} successful: {generation_id}")
                except GammaAPIError as e:
                    if "429" in str(e) or "rate" in str(e).lower():
                        print(f"⚠️ Rate limited on request {i+1}: {e}")
                        break
                    else:
                        raise
            
            # Poll the successful generations
            for i, generation_id in enumerate(generation_ids):
                try:
                    result = await gamma_client.poll_generation(generation_id, max_polls=5)
                    if result['status'] == 'completed':
                        print(f"✅ Generation {i+1} completed: {result['gammaUrl']}")
                except Exception as e:
                    print(f"⚠️ Generation {i+1} polling failed: {e}")
            
        except Exception as e:
            pytest.fail(f"Rate limit test error: {e}")
    
    @pytest.mark.asyncio
    async def test_gamma_api_error_handling(self, gamma_client):
        """Test Gamma API error handling with invalid requests."""
        # Test with invalid API key
        original_key = gamma_client.api_key
        gamma_client.api_key = "invalid_key"
        
        with pytest.raises(GammaAPIError, match="Gamma API key not provided"):
            await gamma_client.generate_presentation("Test content")
        
        # Restore original key
        gamma_client.api_key = original_key
        
        # Test with invalid input length
        with pytest.raises(GammaAPIError, match="Input text must be 1-750,000 characters"):
            await gamma_client.generate_presentation("")
        
        with pytest.raises(GammaAPIError, match="Input text must be 1-750,000 characters"):
            await gamma_client.generate_presentation("x" * 750001)
        
        print("✅ Error handling tests passed")
    
    @pytest.mark.asyncio
    async def test_gamma_prompts_integration(self):
        """Test GammaPrompts integration."""
        try:
            from config.gamma_prompts import GammaPrompts
            
            prompts = GammaPrompts()
            
            # Test executive prompt
            executive_prompt = prompts.build_executive_presentation_prompt(
                start_date="2024-01-01",
                end_date="2024-01-31",
                conversation_count=100,
                key_metrics={'sentiment_trend': 'positive', 'escalation_rate': 15.0},
                customer_quotes=[{
                    'quote': 'Great service!',
                    'customer_name': 'John Doe',
                    'intercom_url': 'https://example.com'
                }],
                top_issues=[{'name': 'Billing', 'count': 50, 'percentage': 50.0}],
                recommendations=['Improve billing process', 'Enhance support', 'Update docs']
            )
            
            assert isinstance(executive_prompt, str)
            assert len(executive_prompt) > 500
            assert "Executive Summary" in executive_prompt
            assert "2024-01-01 to 2024-01-31" in executive_prompt
            
            # Test slide count
            slide_count = prompts.get_slide_count_for_style("executive")
            assert slide_count == 10
            
            # Test additional instructions
            instructions = prompts.get_additional_instructions_for_style("executive")
            assert isinstance(instructions, str)
            assert len(instructions) > 50
            
            print("✅ GammaPrompts integration test passed")
            
        except Exception as e:
            pytest.fail(f"GammaPrompts integration error: {e}")


# Utility functions for manual testing
def print_integration_test_summary():
    """Print a summary of integration test results."""
    print("\n" + "="*60)
    print("GAMMA API INTEGRATION TEST SUMMARY")
    print("="*60)
    print("✅ All integration tests completed successfully!")
    print("\nTo run these tests manually:")
    print("1. Set GAMMA_API_KEY environment variable")
    print("2. Run: pytest tests/integration/test_gamma_api_integration.py -v")
    print("\nNote: Tests marked with @pytest.mark.skipif will only run")
    print("when GAMMA_API_KEY is set in the environment.")
    print("="*60)


if __name__ == "__main__":
    print_integration_test_summary()





